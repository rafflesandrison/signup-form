{"version":3,"sources":["components/SignupForm.js","App.js","serviceWorker.js","index.js"],"names":["SignupForm","state","fields","email","firstName","password","errors","submitSuccess","hasError","bind","str","length","charset","retVal","i","n","charAt","Math","floor","random","type","key","this","e","setState","field","target","value","preventDefault","isValidEmail","test","String","toLowerCase","console","log","generatePassword","Form","className","Group","controlId","Text","Control","placeholder","onChange","handleChange","onFocus","handleFocus","href","Button","variant","onClick","handleClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.88caf281.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass SignupForm extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            fields: {\r\n                email: \"\",\r\n                firstName: \"\",\r\n                password: \"\",\r\n            },\r\n            errors: {\r\n                email: \"\",\r\n                firstName: \"\"\r\n            },\r\n            submitSuccess: false\r\n        }\r\n\r\n        this.hasError = this.hasError.bind(this);\r\n    }\r\n\r\n    generatePassword(str) {\r\n        var length = 8,\r\n            charset = str,\r\n            retVal = \"\";\r\n\r\n        if (str.length < 8)\r\n            length = str.length;\r\n\r\n        for (var i = 0, n = charset.length; i < length; ++i) {\r\n            retVal += charset.charAt(Math.floor(Math.random() * n));\r\n        }\r\n        return retVal;\r\n    }\r\n    hasError(type) {\r\n        for (var key in this.state.errors) {\r\n            if (key === type && this.state.errors[key].length > 0)\r\n                return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    handleFocus(e) {\r\n        this.setState({submitSuccess: false});\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n\r\n        fields[field] = e.target.value;\r\n        errors[field] = \"\";\r\n\r\n        let state = {\r\n            fields,\r\n            errors\r\n        }\r\n        this.setState({state})\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        // verify email structure\r\n        let fields = this.state.fields;\r\n        let errors = this.state.errors;\r\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const isValidEmail = re.test(String(fields.email).toLowerCase());\r\n        \r\n        if (fields[\"email\"] === \"\")\r\n            errors[\"email\"] = \"Email must not be empty\";\r\n        else if (!isValidEmail)\r\n            errors[\"email\"] = \"Incorrect email format\";\r\n        \r\n        if (fields[\"firstName\"] === \"\")\r\n            errors[\"firstName\"] = \"Please tell us your name\";\r\n        \r\n        this.setState({errors})\r\n        if (this.hasError(\"email\") || this.hasError(\"firstName\")) {\r\n            console.log(\"Has errors...\")\r\n            console.log(errors);\r\n            return;\r\n        }\r\n         \r\n        // generate password - to be sent to prospect via email\r\n        // reduce 1 step in signup process\r\n        fields[\"password\"] = this.generatePassword(fields.email);\r\n        \r\n        // send email to prospect\r\n        // <CODE GOES HERE>\r\n\r\n        for (var key in fields)\r\n            fields[key] = \"\";\r\n        \r\n        for (var key in errors)\r\n            errors[key] = \"\";\r\n\r\n        this.setState({submitSuccess: true});\r\n        \r\n        console.log(fields)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Form className=\"signup-form\">\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Text className=\"signup-title\">\r\n                        Try MindFi Today\r\n                    </Form.Text>\r\n                    <Form.Text className=\"signup-sub-title\">\r\n                        Join 153 companies in improving mental wellness for your workforce.\r\n                    </Form.Text>\r\n                    <Form.Control \r\n                        className={`input-field`}\r\n                        type=\"email\" \r\n                        placeholder=\"name@example.com\" \r\n                        value={this.state.fields.email} \r\n                        onChange={this.handleChange.bind(this, \"email\")}\r\n                        onFocus={this.handleFocus.bind(this)}\r\n                    />\r\n                        <p className=\"error-message\">{this.hasError(\"email\") ? this.state.errors[\"email\"] : \"\"}</p>\r\n                    <Form.Control \r\n                        className=\"input-field\" \r\n                        type=\"text\" \r\n                        placeholder=\"first name\" \r\n                        value={this.state.fields.firstName} \r\n                        onChange={this.handleChange.bind(this, \"firstName\")}\r\n                        onFocus={this.handleFocus.bind(this)}\r\n                    />\r\n                    <p className=\"error-message\">{this.hasError(\"firstName\") ? this.state.errors[\"firstName\"] : \"\"}</p>\r\n\r\n                </Form.Group>\r\n\r\n                <div className={`success-message ` + (!this.state.submitSuccess ? `display-none` : ``)}  >\r\n                    <p>Hooray! Your free trial is on the way. Please check your email for more info.</p>\r\n                    <p>In the mean time, check out our <a href=\"#\">articles</a>. We think you'll love them.</p>\r\n                </div>\r\n                <Button className=\"claim-btn\" variant=\"warning\" type=\"submit\" onClick={this.handleClick.bind(this)}>\r\n                    <span className=\"claim-btn-name\">Free Trial</span>\r\n                </Button>\r\n          </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignupForm;","import React from 'react';\nimport './App.css';\nimport SignupForm from './components/SignupForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SignupForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}